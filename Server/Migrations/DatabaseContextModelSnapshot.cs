// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ZeDrive.Server.Data;

#nullable disable

namespace ZeDrive.Server.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.7");

            modelBuilder.Entity("ZeDrive.Shared.Models.Chunk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<uint>("Distribution")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "distribution");

                    b.Property<Guid?>("FileId")
                        .HasColumnType("TEXT");

                    b.Property<uint>("Sequence")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "sequence");

                    b.Property<uint>("Size")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "size");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.ToTable("Chunk");

                    b.HasAnnotation("Relational:JsonPropertyName", "chunks");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "file_hash");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "file_name");

                    b.Property<decimal>("FileSize")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "file_size");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "folder_id");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_completed");

                    b.Property<string>("MasterKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "master_key");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("MasterKey")
                        .IsUnique();

                    b.ToTable("File");

                    b.HasAnnotation("Relational:JsonPropertyName", "files");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "path");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("Folder");

                    b.HasAnnotation("Relational:JsonPropertyName", "folders");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid>("FileId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "file_id");

                    b.Property<string>("MasterKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "master_key");

                    b.Property<Guid?>("ShareId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MasterKey")
                        .IsUnique();

                    b.HasIndex("ShareId");

                    b.ToTable("Item");

                    b.HasAnnotation("Relational:JsonPropertyName", "items");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<bool>("IsEditor")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_editor");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_owner");

                    b.Property<string>("MasterKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "master_key");

                    b.Property<Guid?>("SpaceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("MasterKey")
                        .IsUnique();

                    b.HasIndex("SpaceId");

                    b.ToTable("Member");

                    b.HasAnnotation("Relational:JsonPropertyName", "owner");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.ToTable("Plan");

                    b.HasAnnotation("Relational:JsonPropertyName", "plan");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "expired_at");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_cancelled");

                    b.Property<Guid?>("PlanId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.ToTable("Resource");

                    b.HasAnnotation("Relational:JsonPropertyName", "resources");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Share", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "expire_at");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "folder_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_active");

                    b.Property<bool>("IsFolder")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_folder");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_public");

                    b.Property<string>("MasterKey")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "master_key");

                    b.Property<Guid?>("SpaceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Share");

                    b.HasAnnotation("Relational:JsonPropertyName", "shares");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Space", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("StorageId");

                    b.ToTable("Space");

                    b.HasAnnotation("Relational:JsonPropertyName", "spaces");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Storage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid>("SpaceId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.HasKey("Id");

                    b.HasIndex("SpaceId");

                    b.ToTable("Storage");

                    b.HasAnnotation("Relational:JsonPropertyName", "storage");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created_at");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Pseudonym")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "pseudonym");

                    b.Property<string>("SharedId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "shared_id");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "username");

                    b.HasKey("Id");

                    b.HasIndex("PlanId");

                    b.HasIndex("StorageId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Chunk", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.File", null)
                        .WithMany("Chunks")
                        .HasForeignKey("FileId");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.File", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Folder", null)
                        .WithMany("Files")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Folder", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Folder", null)
                        .WithMany("Folders")
                        .HasForeignKey("FolderId");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Item", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Share", null)
                        .WithMany("Items")
                        .HasForeignKey("ShareId");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Member", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Space", null)
                        .WithMany("Members")
                        .HasForeignKey("SpaceId");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Resource", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Plan", null)
                        .WithMany("Resources")
                        .HasForeignKey("PlanId");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Share", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Space", null)
                        .WithMany("Shares")
                        .HasForeignKey("SpaceId");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Space", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Folder", "Folder")
                        .WithMany()
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZeDrive.Shared.Models.Member", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZeDrive.Shared.Models.Storage", null)
                        .WithMany("Spaces")
                        .HasForeignKey("StorageId");

                    b.Navigation("Folder");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Storage", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Space", "Space")
                        .WithMany()
                        .HasForeignKey("SpaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Space");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.User", b =>
                {
                    b.HasOne("ZeDrive.Shared.Models.Plan", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ZeDrive.Shared.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.File", b =>
                {
                    b.Navigation("Chunks");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Folders");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Plan", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Share", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Space", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("ZeDrive.Shared.Models.Storage", b =>
                {
                    b.Navigation("Spaces");
                });
#pragma warning restore 612, 618
        }
    }
}
